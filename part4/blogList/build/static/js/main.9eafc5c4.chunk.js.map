{"version":3,"sources":["components/Notification.js","components/Blog.js","components/BlogForm.js","components/Togglable.js","services/blogs.js","services/login.js","App.js","index.js"],"names":["Notification","message","messageType","className","Blog","blog","updateBlog","deleteBlog","loggedUser","useState","viewDetails","setViewDetails","isOwner","setIsOwner","useEffect","username","user","showDetails","display","handleLike","a","blogWithUpdatedLike","id","title","author","url","likes","handleRemove","window","confirm","blogToDelete","style","marginBottom","paddingTop","border","onClick","BlogForm","createBlog","blogTitle","setBlogTitle","blogAuthor","setBlogAuthor","blogUrl","setBlogUrl","handleSubmit","e","preventDefault","newBlog","onSubmit","type","value","name","onChange","target","Togglable","props","visible","setVisible","toggleVisibility","hideWhenVisible","showWhenVisible","buttonName","children","token","getAll","axios","get","response","data","setToken","newToken","create","newObj","config","headers","Authorization","post","update","updateObj","put","deleteItem","deleteObj","delete","login","credentials","App","blogs","setBlogs","setUsername","password","setPassword","setUser","setMessage","setMessageType","blogService","blogsFromServer","sort","blogA","blogB","JSON","parse","localStorage","getItem","clearLoginForm","showMessage","messageText","setTimeout","handleLogin","loginService","userResponse","setItem","stringify","concat","newInfoForBlog","updatedBlog","map","filter","loggedUserToBlog","removeItem","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9eafc5c4.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Notification = ({ message, messageType }) => {\r\n    if(!message) return null\r\n\r\n    return (\r\n      <div className={`notification-${messageType}`}>\r\n        {message}\r\n      </div>\r\n    )\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n  messageType: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Blog = ({ blog, updateBlog, deleteBlog, loggedUser }) => {\r\n  const [viewDetails, setViewDetails] = useState(false)\r\n  const [isOwner, setIsOwner] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if(loggedUser.username && blog.user.username && loggedUser.username === blog.user.username) {\r\n      setIsOwner(true)\r\n    }\r\n  }, [])\r\n  \r\n  const blogStyle = {\r\n    marginBottom: '0.5rem',\r\n    paddingTop: '0.5rem',\r\n    border: '1px solid black'\r\n  }\r\n\r\n  const toggleView = () => setViewDetails(!viewDetails)\r\n  const showDetails = { display: viewDetails ? '' : 'none' }\r\n\r\n  const handleLike = async () => {\r\n    const blogWithUpdatedLike = {\r\n      user: blog.user.id,\r\n      title: blog.title,\r\n      author: blog.author,\r\n      url: blog.url,\r\n      likes: blog.likes + 1,\r\n      id: blog.id\r\n    }\r\n    await updateBlog(blogWithUpdatedLike)\r\n  }\r\n\r\n  const handleRemove = async () => {\r\n    if(window.confirm('Are you sure you want to delete this blog? This action is irreversible')){\r\n      const blogToDelete = {\r\n        id: blog.id,\r\n        user: blog.user.id,\r\n      }\r\n      await deleteBlog(blogToDelete)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={blogStyle} className='blogItem'>\r\n      <div className='blogItem-initialInfo'>\r\n        {blog.title} <button onClick={toggleView}>View Details</button>\r\n      </div>\r\n      <div style={showDetails} className='blogItem-detailsInfo'>\r\n        <p>Author: {blog.author}</p>\r\n        <p>URL: {blog.url}</p>\r\n        {blog.user\r\n          ? <p>Likes: {blog.likes} <button onClick={handleLike}>like</button></p>\r\n          : null\r\n        }\r\n        {\r\n          isOwner &&\r\n          <p><button onClick={handleRemove}>Remove</button></p>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nBlog.propTypes = {\r\n  blog: PropTypes.object.isRequired,\r\n  loggedUser: PropTypes.object.isRequired,\r\n  updateBlog: PropTypes.func.isRequired,\r\n  deleteBlog: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Blog\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst BlogForm = ({ createBlog }) => {\r\n    const [blogTitle, setBlogTitle] = useState('')\r\n    const [blogAuthor, setBlogAuthor] = useState('')\r\n    const [blogUrl, setBlogUrl] = useState('')\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const newBlog = {\r\n            title: blogTitle,\r\n            author: blogAuthor,\r\n            url: blogUrl\r\n        }\r\n        await createBlog(newBlog)\r\n        setBlogTitle('')\r\n        setBlogAuthor('')\r\n        setBlogUrl('')\r\n    }   \r\n\r\n    return (\r\n    <form onSubmit={handleSubmit} className='blog-form'>\r\n        <div>\r\n          title: <input \r\n            type=\"text\"\r\n            id='input-title'\r\n            value={blogTitle}\r\n            name='blogTitle'\r\n            onChange={({ target }) => setBlogTitle(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          author: <input \r\n            type=\"text\"\r\n            id='input-author'\r\n            value={blogAuthor}\r\n            name='blogAuthor'\r\n            onChange={({ target }) => setBlogAuthor(target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          url: <input \r\n            type=\"text\"\r\n            id='input-url'\r\n            value={blogUrl}\r\n            onChange={({ target }) => setBlogUrl(target.value)}\r\n          />\r\n        </div>\r\n        <button type='submit'>Create New Blog</button>\r\n      </form>\r\n    )\r\n}\r\n\r\nBlogForm.propTypes = {\r\n  createBlog: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default BlogForm","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Togglable = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    \r\n    const toggleVisibility = () => setVisible(!visible)\r\n\r\n    const hideWhenVisible = { display: visible ? 'none' : '' }\r\n    const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n    return (\r\n        <div>\r\n            <div style={hideWhenVisible}>\r\n                <button onClick={toggleVisibility}>{props.buttonName}</button>\r\n            </div>\r\n            <div style={showWhenVisible}>\r\n                {props.children}\r\n                <button onClick={toggleVisibility}>Go Back</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nTogglable.propTypes = {\r\n    buttonLabel: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Togglable","import axios from 'axios'\nconst baseUrl = '/api/blogs'\n\nlet token = null\n\nconst setToken = (newToken) => {\n    token = `Bearer ${newToken}`\n}\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async newObj => {\n  const config = {\n    headers: { Authorization: token }\n  }\n  const response = await axios.post(baseUrl, newObj, config )\n  return response.data\n}\n\nconst update = async updateObj => {\n  const response = await axios.put(`${baseUrl}/${updateObj.id}`, updateObj)\n  return response.data\n}\n\nconst deleteItem = async deleteObj => {\n  const config = {\n    headers: { Authorization: token }\n  }\n  const response = await axios.delete(`${baseUrl}/${deleteObj.id}`, config, deleteObj)\n  return response.data\n}\n\nexport default { getAll, setToken, create, update, deleteItem }","import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async (credentials) => {\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default { login }","import React, { useState, useEffect } from 'react'\n\nimport Notification from './components/Notification'\nimport Blog from './components/Blog'\nimport BlogForm from './components/BlogForm'\nimport Togglable from './components/Togglable'\n\nimport blogService from './services/blogs'\nimport loginService from './services/login'\n\nconst App = () => {\n  //blog content\n  const [blogs, setBlogs] = useState([])\n  //auth\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  //notifications\n  const [message, setMessage] = useState('')\n  const [messageType, setMessageType] = useState('')\n  \n  useEffect(async () => {\n      const blogsFromServer = await blogService.getAll()\n      //blogs will be listed by the number of likes\n      setBlogs(blogsFromServer.sort((blogA, blogB) => blogB.likes - blogA.likes))\n  }, [])\n\n  useEffect(() => {\n    const loggedUser = JSON.parse(window.localStorage.getItem('loggedBloglistUser'))\n    if(loggedUser){\n      setUser(loggedUser)\n      blogService.setToken(loggedUser.token)\n    }\n  }, [])\n\n  const clearLoginForm = () => {\n    setUsername('')\n    setPassword('')\n  }\n\n  const showMessage = (messageText, type) => {\n      setMessage(messageText)\n      setMessageType(type)\n      setTimeout(() => {\n        setMessage('')\n        setMessageType('')\n      }, 4000)\n  }\n\n  const handleLogin = async (e) => {\n    e.preventDefault()\n    try {\n      const userResponse = await loginService.login({ username, password })\n      window.localStorage.setItem('loggedBloglistUser', JSON.stringify(userResponse))\n      blogService.setToken(userResponse.token)\n      setUser(userResponse)\n      clearLoginForm()\n    } catch(exception) {\n        showMessage('Wrong Credentials', 'error')\n        clearLoginForm()\n    }\n  }\n\n  const handleLogout = () => {\n    window.localStorage.removeItem('loggedBloglistUser')\n    setUser(null)\n    blogService.setToken(null)\n    showMessage('User logged out', 'success')\n    clearLoginForm()\n  }\n\n  const createBlog = async (newBlog) => {\n    try {\n      const blog = await blogService.create(newBlog)\n      setBlogs(blogs.concat(blog))\n      showMessage(`New Blog ${blog.title} added`, 'success')\n    } catch(exception) {\n      showMessage('Invalid or missing information on form', 'error')\n    }\n  }\n\n  const updateBlog = async (newInfoForBlog) => {\n    try {\n      const updatedBlog = await blogService.update(newInfoForBlog)\n      setBlogs(blogs.map(blog => blog.id === updatedBlog.id ? updatedBlog : blog))\n      showMessage(`Blog ${updatedBlog.title} updated`, 'success')\n    } catch(exception) {\n      showMessage('Invalid action', 'error')\n    }\n  }\n\n  const deleteBlog = async (blogToDelete) => {\n    try {\n      await blogService.deleteItem(blogToDelete)\n      setBlogs(blogs.filter(blog => blog.id !== blogToDelete.id))\n      showMessage('Blog Removed', 'success')\n    } catch(exception) {\n      showMessage(`You don't have authorization for this action`, 'error')\n    }\n  }\n\n  if(user === null){\n    return (\n      <form onSubmit={handleLogin}>\n        <Notification message={message} messageType={messageType} />\n        <div>\n          Username: \n          <input \n            type=\"text\"\n            value={username}\n            name='username'\n            onChange={(e) => setUsername(e.target.value)}\n            />\n        </div>\n        <div>\n          Password:\n          <input \n            type=\"text\"\n            value={password}\n            name='password'\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    )\n  }\n\n  const loggedUserToBlog = user ? user : false\n\n  return (\n    <div>\n      <h2>blogs</h2>\n      <Notification message={message} messageType={messageType} />\n      <p>\n        {user.name} is logged <button onClick={handleLogout}>Logout</button>\n      </p>\n      <h2>Create Blog</h2>\n      <Togglable buttonName={'Create New Blog'}>\n        <BlogForm createBlog={createBlog} />\n      </Togglable>\n      {blogs.map(blog =>\n        <Blog key={blog.id} blog={blog} updateBlog={updateBlog} deleteBlog={deleteBlog} loggedUser={loggedUserToBlog} />\n      )}\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './App.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}