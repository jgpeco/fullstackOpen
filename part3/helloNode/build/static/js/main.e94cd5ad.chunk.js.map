{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObj","post","id","put","login","credentials","a","Footer","style","color","fontStyle","fontSize","display","justifyContent","margin","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","useEffect","noteService","initialNotes","addNote","event","preventDefault","noteObj","date","Date","toISOString","Math","random","returnedNote","concat","handleNoteChange","target","value","handleLogin","loginService","console","log","setTimeout","notesToShow","filter","onSubmit","type","name","onChange","map","find","n","changedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e94cd5ad.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important\n        ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (message === null) return null\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\n\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    // const nonExisting = {\n    //     id: 100000,\n    //     content: 'This note is not saved to server',\n    //     date: '2020-10-30T17:30:31.0.98Z',\n    //     important: true,\n    // }\n    return request.then(response => response.data)\n}\n\nconst create = newObj => {\n    const request = axios.post(baseUrl, newObj)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObj) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObj)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credentials => {\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default { login }","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\nimport loginService from './services/login'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: '1.2rem',\n    display: 'flex',\n    justifyContent: 'center',\n    margin: '1.5rem'\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br/>\n      <em>Note app, Department of Pecosville</em>\n    </div>\n  )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [user, setUser] = useState(null)\n\n    useEffect(() => {\n      noteService\n        .getAll()\n        .then(initialNotes => {\n          setNotes(initialNotes)\n        })\n    }, [])\n\n\n    const addNote = (event) => {\n      event.preventDefault()\n      const noteObj = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() < 0.5,\n      }\n\n      noteService\n        .create(noteObj)\n        .then(returnedNote => {\n          setNotes(notes.concat(returnedNote))\n          setNewNote('')\n        })\n    }\n\n    const handleNoteChange = (event) => {\n      setNewNote(event.target.value)\n    }\n\n    const toggleImportanceOf = (id) => {\n      const note = notes.find(n => n.id === id)\n      const changedNote = {...note, important: !note.important}\n\n      noteService\n        .update(id, changedNote)\n        .then(returnedNote =>\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote)))\n        .catch(error => {\n          setErrorMessage(\n            `Note '${note.content}' was already removed from server`\n          )\n          setTimeout(() => setErrorMessage(null), 5000)\n          setNotes(notes.filter(n => n.id !== id))\n        })\n    }\n\n    const handleLogin = async (event) => {\n      event.preventDefault()\n      \n      try {\n        const user = await loginService.login({\n          username, password,\n        })\n        console.log(user)\n        setUser(user)\n        setUsername('')\n        setPassword('')\n      } catch(exception) {\n        setErrorMessage('Wrong Credetials')\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 4000)\n      }\n    }\n\n    const notesToShow = showAll\n      ? notes\n      : notes.filter(note => note.important)\n\n      const loginForm = () => (\n        <form onSubmit={handleLogin}>\n          <div>\n            username\n            <input \n              type=\"text\"\n              value={username}\n              name='Username'\n              onChange={({ target }) => setUsername(target.value)}\n            />\n          </div>\n          <div>\n            password\n            <input \n              type=\"text\"\n              value={password}\n              name='Password'\n              onChange={({ target }) => setPassword(target.value)}\n            />\n          </div>\n          <button type='submit'>Login</button>\n        </form>\n      )\n\n      const noteForm = () => (\n        <form onSubmit={addNote}>\n          <input \n            type=\"text\" \n            value={newNote}\n            onChange={handleNoteChange} />\n          <button type='submit'>Save</button>\n        </form>\n      )\n\n    return (\n      <div>\n        <h1>Notes</h1>\n        <Notification message={errorMessage} />\n        {\n          user === null\n          ? loginForm()\n          : <div>\n            <p>{user.name} logged</p>\n            {noteForm()}\n          </div>\n        }\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all'}\n          </button>\n        </div>\n        <ul>\n          {notesToShow.map((note) =>\n            <Note \n              key={note.id} \n              note={note} \n              toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n          )}\n        </ul>\n        <Footer />\n      </div>\n    )\n  }\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n \n\n\n\n\n\n"],"sourceRoot":""}