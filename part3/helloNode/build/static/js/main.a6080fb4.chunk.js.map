{"version":3,"sources":["components/Note.js","components/Notification.js","components/Togglable.js","components/NoteForm.js","components/LoginForm.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Toggable","React","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","buttonLabel","children","displayName","NoteForm","createNote","newNote","setNewNote","onSubmit","event","preventDefault","type","value","onChange","target","LoginForm","handleLogin","username","setUsername","password","setPassword","handleSubmit","a","id","baseUrl","token","getAll","axios","get","then","response","data","create","newObj","config","headers","Authorization","post","update","newObject","put","setToken","newToken","login","credentials","Footer","color","fontStyle","fontSize","justifyContent","margin","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","user","setUser","useEffect","noteService","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","noteFormRef","useRef","addNote","noteObj","current","returnedNote","concat","userObj","loginService","setItem","stringify","setTimeout","notesToShow","filter","Togglable","name","removeItem","map","i","find","n","changedNote","catch","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6080fb4.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) return null\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useImperativeHandle } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Toggable = React.forwardRef((props, ref) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const hideWhenVisible = { display: visible ? 'none' : '' }\r\n    const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n    const toggleVisibility = () => {\r\n        setVisible(!visible)\r\n    }\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            toggleVisibility\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div style={hideWhenVisible}>\r\n                <button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n            </div>\r\n            <div style={showWhenVisible} className='togglableContent'>\r\n                {props.children}\r\n                <button onClick={toggleVisibility}>Cancel</button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nToggable.displayName = 'Toggable'\r\n\r\nToggable.propTypes = {\r\n    buttonLabel: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Toggable","import React, { useState } from 'react'\r\n\r\nconst NoteForm = ({ createNote }) => {\r\n    const [newNote, setNewNote] = useState('')\r\n\r\n    const handleChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        createNote({\r\n            content: newNote,\r\n            important: false,\r\n        })\r\n        setNewNote('')\r\n    }\r\n\r\n    return (\r\n        <div className='formDiv'>\r\n            <h2>Create a new note</h2>\r\n            <form onSubmit={addNote}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={newNote}\r\n                    onChange={handleChange}\r\n                />\r\n                <button type=\"submit\">Save</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoteForm","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst LoginForm = ({  handleLogin }) => {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n        await handleLogin({ username, password })\r\n        setUsername('')\r\n        setPassword('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Login</h2>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    Username: <input\r\n                        type=\"text\"\r\n                        id='username'\r\n                        value={username}\r\n                        onChange={({ target }) => setUsername(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    Password: <input\r\n                        type=\"password\"\r\n                        id='password'\r\n                        value={password}\r\n                        onChange={({ target }) => setPassword(target.value)}\r\n                    />\r\n                </div>\r\n                <button id='login-button' type=\"submit\">Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nLoginForm.propTypes = {\r\n    handleLogin: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default LoginForm","import axios from 'axios'\n\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = async newObj => {\n    const config = {\n        headers: { Authorization: token },\n    }\n\n    const response = await axios.post(baseUrl, newObj, config)\n    return response.data\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, setToken }","import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credentials => {\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default { login }","import React, { useState, useEffect, useRef } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Togglable from './components/Togglable'\nimport NoteForm from './components/NoteForm'\nimport LoginForm from './components/LoginForm'\nimport noteService from './services/notes'\nimport loginService from './services/login'\n\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: '1.2rem',\n    display: 'flex',\n    justifyContent: 'center',\n    margin: '1.5rem'\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br/>\n      <em>Note app, Department of Pecosville</em>\n    </div>\n  )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n    const [user, setUser] = useState(null)\n\n    useEffect(() => {\n      noteService\n        .getAll()\n        .then(initialNotes => {\n          setNotes(initialNotes)\n        })\n    }, [])\n\n    useEffect(() => {\n      const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n      if(loggedUserJSON) {\n        const user = JSON.parse(loggedUserJSON)\n        setUser(user)\n        noteService.setToken(user.token)\n      }\n    }, [])\n\n    const noteFormRef = useRef()\n\n    const addNote = (noteObj) => {\n      noteFormRef.current.toggleVisibility()\n      noteService\n        .create(noteObj)\n        .then(returnedNote => {\n          setNotes(notes.concat(returnedNote))\n        })\n    }\n\n    const toggleImportanceOf = (id) => {\n      const note = notes.find(n => n.id === id)\n      const changedNote = { ...note, important: !note.important }\n\n      noteService\n        .update(id, changedNote)\n        .then(returnedNote => {\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n        })\n        .catch(() => {\n          setErrorMessage(\n            `Note '${note.content}' was already removed from server`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n        })\n    }\n\n    const handleLogin = async (userObj) => {\n      try {\n        const user = await loginService.login(userObj)\n\n        window.localStorage.setItem(\n          'loggedNoteappUser', JSON.stringify(user)\n        )\n        noteService.setToken(user.token)\n        setUser(user)\n      } catch(exception) {\n        setErrorMessage('Wrong Credentials')\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 4000)\n      }\n    }\n\n    const handleLogout = () => {\n      window.localStorage.removeItem('loggedNoteappUser')\n      noteService.setToken(null)\n      setUser(null)\n    }\n\n    const notesToShow = showAll\n      ? notes\n      : notes.filter(note => note.important)\n\n    const loginForm = () => (\n        <Togglable buttonLabel='Login'>\n          <LoginForm\n              handleLogin={handleLogin}\n            />\n        </Togglable>\n    )\n\n    const noteForm = () => (\n      <Togglable buttonLabel='New Note' ref={noteFormRef}>\n        <NoteForm createNote={addNote} />\n      </Togglable>\n    )\n\n    return (\n      <div>\n        <h1>Notes</h1>\n        <Notification message={errorMessage} />\n        {\n          user === null\n          ? loginForm()\n          : <div>\n            <p>{user.name} logged</p>\n            {noteForm()}\n            <button onClick={handleLogout}>Logout</button>\n          </div>\n        }\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all'}\n          </button>\n        </div>\n        <ul>\n          {notesToShow.map((note, i) =>\n            <Note\n              key={i}\n              note={note}\n              toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n          )}\n        </ul>\n        <Footer />\n      </div>\n    )\n  }\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n\n\n\n\n"],"sourceRoot":""}