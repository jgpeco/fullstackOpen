{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","token","getAll","axios","get","then","response","data","create","newObj","a","config","headers","Authorization","post","update","id","put","setToken","newToken","login","credentials","Footer","style","color","fontStyle","fontSize","display","justifyContent","margin","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","useEffect","noteService","initialNotes","addNote","event","preventDefault","noteObj","date","Date","toISOString","Math","random","returnedNote","concat","handleNoteChange","target","value","handleLogin","loginService","setTimeout","notesToShow","filter","onSubmit","type","name","onChange","map","find","n","changedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5130a05f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important\n        ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (message === null) return null\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\n\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = async newObj => {\n    const config = {\n        headers: {Authorization: token},\n    }\n\n    const response = await axios.post(baseUrl, newObj, config)\n    return response.data\n}\n\nconst update = (id, newObj) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObj)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, setToken }","import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credentials => {\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default { login }","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\nimport loginService from './services/login'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: '1.2rem',\n    display: 'flex',\n    justifyContent: 'center',\n    margin: '1.5rem'\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br/>\n      <em>Note app, Department of Pecosville</em>\n    </div>\n  )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [user, setUser] = useState(null)\n\n    useEffect(() => {\n      noteService\n        .getAll()\n        .then(initialNotes => {\n          setNotes(initialNotes)\n        })\n    }, [])\n\n\n    const addNote = (event) => {\n      event.preventDefault()\n      const noteObj = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() < 0.5,\n      }\n\n      noteService\n        .create(noteObj)\n        .then(returnedNote => {\n          setNotes(notes.concat(returnedNote))\n          setNewNote('')\n        })\n    }\n\n    const handleNoteChange = (event) => {\n      setNewNote(event.target.value)\n    }\n\n    const toggleImportanceOf = (id) => {\n      const note = notes.find(n => n.id === id)\n      const changedNote = {...note, important: !note.important}\n\n      noteService\n        .update(id, changedNote)\n        .then(returnedNote =>\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote)))\n        .catch(error => {\n          setErrorMessage(\n            `Note '${note.content}' was already removed from server`\n          )\n          setTimeout(() => setErrorMessage(null), 5000)\n          setNotes(notes.filter(n => n.id !== id))\n        })\n    }\n\n    const handleLogin = async (event) => {\n      event.preventDefault()\n      \n      try {\n        const user = await loginService.login({\n          username, password,\n        })\n        noteService.setToken(user.token)\n        setUser(user)\n        setUsername('')\n        setPassword('')\n      } catch(exception) {\n        setErrorMessage('Wrong Credentials')\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 4000)\n      }\n    }\n\n    const notesToShow = showAll\n      ? notes\n      : notes.filter(note => note.important)\n\n      const loginForm = () => (\n        <form onSubmit={handleLogin}>\n          <div>\n            username\n            <input \n              type=\"text\"\n              value={username}\n              name='Username'\n              onChange={({ target }) => setUsername(target.value)}\n            />\n          </div>\n          <div>\n            password\n            <input \n              type=\"text\"\n              value={password}\n              name='Password'\n              onChange={({ target }) => setPassword(target.value)}\n            />\n          </div>\n          <button type='submit'>Login</button>\n        </form>\n      )\n\n      const noteForm = () => (\n        <form onSubmit={addNote}>\n          <input \n            type=\"text\" \n            value={newNote}\n            onChange={handleNoteChange} />\n          <button type='submit'>Save</button>\n        </form>\n      )\n\n    return (\n      <div>\n        <h1>Notes</h1>\n        <Notification message={errorMessage} />\n        {\n          user === null\n          ? loginForm()\n          : <div>\n            <p>{user.name} logged</p>\n            {noteForm()}\n          </div>\n        }\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all'}\n          </button>\n        </div>\n        <ul>\n          {notesToShow.map((note) =>\n            <Note \n              key={note.id} \n              note={note} \n              toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n          )}\n        </ul>\n        <Footer />\n      </div>\n    )\n  }\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n \n\n\n\n\n\n"],"sourceRoot":""}