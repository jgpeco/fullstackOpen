{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObj","post","id","put","Footer","style","color","fontStyle","fontSize","display","justifyContent","margin","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObj","date","Date","toISOString","Math","random","concat","type","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"0LAceA,EAZF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACXC,EAAQF,EAAKG,UACb,qBAAuB,iBAE7B,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCGjCK,EAVM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EAAyB,KAGzB,qBAAKJ,UAAU,QAAf,SACKI,K,gBCLPC,EAAU,aAuBD,EArBA,WAQX,OAPgBC,IAAMC,IAAIF,GAOXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCjBvCK,EAAS,WAUb,OACE,sBAAKC,MAVa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,SACVC,QAAS,OACTC,eAAgB,SAChBC,OAAQ,UAIR,UACE,uBACA,wEA2FSC,EAtFH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAMdC,qBAAU,WACRC,IAEG1B,MAAK,SAAA2B,GACJT,EAASS,QAEZ,IAGH,IAqCMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAAS2B,IACvB,8BACE,yBAAQ7B,QAAS,kBAAM4B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAAC1C,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAnCD,SAACgB,GAC1B,IAAMjB,EAAO6B,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOA,KAChC4B,EAAW,2BAAO7C,GAAP,IAAaG,WAAYH,EAAKG,YAE/CmC,EACUrB,EAAI4B,GACXjC,MAAK,SAAAkC,GAAY,OAChBhB,EAASD,EAAMa,KAAI,SAAA1C,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAO8C,SACpDC,OAAM,SAAAC,GACLZ,EAAgB,SAAD,OACJpC,EAAKK,QADD,sCAGf4C,YAAW,kBAAMb,EAAgB,QAAO,KACxCN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE3B,KAAOA,SAsBRiC,CAAmBlD,EAAKiB,MAF3CjB,EAAKiB,SAMhB,uBAAMkC,SA3DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAU,CACdjD,QAAS0B,EACTwB,MAAM,IAAIC,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,IAG7BrB,EACUgB,GACP1C,MAAK,SAAAkC,GACJhB,EAASD,EAAM+B,OAAOd,IACtBd,EAAW,QA+Cb,UACI,uBACE6B,KAAK,OACLC,MAAO/B,EACPgC,SA/Ce,SAACX,GACxBpB,EAAWoB,EAAMY,OAAOF,UA+ClB,wBAAQD,KAAK,SAAb,qBAEJ,cAAC,EAAD,Q,MClGRI,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.83a408bf.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important\n        ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (message === null) return null\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import axios from 'axios'\n\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    // const nonExisting = {\n    //     id: 100000,\n    //     content: 'This note is not saved to server',\n    //     date: '2020-10-30T17:30:31.0.98Z',\n    //     important: true,\n    // }\n    return request.then(response => response.data)\n}\n\nconst create = newObj => {\n    const request = axios.post(baseUrl, newObj)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObj) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObj)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: '1.2rem',\n    display: 'flex',\n    justifyContent: 'center',\n    margin: '1.5rem'\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br/>\n      <em>Note app, Department of Pecosville</em>\n    </div>\n  )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n      noteService\n        .getAll()\n        .then(initialNotes => {\n          setNotes(initialNotes)\n        })\n    }, [])\n\n\n    const addNote = (event) => {\n      event.preventDefault()\n      const noteObj = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() < 0.5,\n      }\n\n      noteService\n        .create(noteObj)\n        .then(returnedNote => {\n          setNotes(notes.concat(returnedNote))\n          setNewNote('')\n        })\n    }\n\n    const handleNoteChange = (event) => {\n      setNewNote(event.target.value)\n    }\n\n    const toggleImportanceOf = (id) => {\n      const note = notes.find(n => n.id === id)\n      const changedNote = {...note, important: !note.important}\n\n      noteService\n        .update(id, changedNote)\n        .then(returnedNote =>\n          setNotes(notes.map(note => note.id !== id ? note : returnedNote)))\n        .catch(error => {\n          setErrorMessage(\n            `Note '${note.content}' was already removed from server`\n          )\n          setTimeout(() => setErrorMessage(null), 5000)\n          setNotes(notes.filter(n => n.id !== id))\n        })\n    }\n\n    const notesToShow = showAll\n      ? notes\n      : notes.filter(note => note.important)\n\n    return (\n      <div>\n        <h1>Notes</h1>\n        <Notification message={errorMessage} />\n        <div>\n          <button onClick={() => setShowAll(!showAll)}>\n            show {showAll ? 'important' : 'all'}\n          </button>\n        </div>\n        <ul>\n          {notesToShow.map((note) =>\n            <Note \n              key={note.id} \n              note={note} \n              toggleImportance={() => toggleImportanceOf(note.id)}\n            />\n          )}\n        </ul>\n        <form onSubmit={addNote}>\n            <input \n              type=\"text\" \n              value={newNote}\n              onChange={handleNoteChange} />\n            <button type='submit'>Save</button>\n        </form>\n        <Footer />\n      </div>\n    )\n  }\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n \n\n\n\n\n\n"],"sourceRoot":""}