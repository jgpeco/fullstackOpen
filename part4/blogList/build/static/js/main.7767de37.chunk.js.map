{"version":3,"sources":["components/Blog.js","services/blogs.js","services/login.js","App.js","index.js"],"names":["Blog","blog","title","author","token","getAll","a","axios","get","response","data","setToken","newToken","create","newObj","config","headers","Authorization","post","login","credentials","Notification","message","messageType","className","App","useState","blogs","setBlogs","blogTitle","setBlogTitle","blogAuthor","setBlogAuthor","blogUrl","setBlogUrl","username","setUsername","password","setPassword","user","setUser","setMessage","setMessageType","useEffect","blogService","loggedUser","JSON","parse","window","localStorage","getItem","clearLoginForm","clearBlogForm","showMessage","messageText","type","setTimeout","handleLogin","e","preventDefault","loginService","userResponse","setItem","stringify","createBlog","url","concat","onSubmit","value","name","onChange","target","onClick","removeItem","map","key","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7767de37.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Blog = ({ blog }) => (\r\n  <div>\r\n    {blog.title} {blog.author}\r\n  </div>\r\n)\r\n\r\nexport default Blog\r\n","import axios from 'axios'\nconst baseUrl = '/api/blogs'\n\nlet token = null\n\nconst setToken = (newToken) => {\n    token = `Bearer ${newToken}`\n}\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async newObj => {\n  const config = {\n    headers: { Authorization: token }\n  }\n  const response = await axios.post(baseUrl, newObj, config )\n  return response.data\n}\n\nexport default { getAll, setToken, create }","import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async (credentials) => {\r\n    const response = await axios.post(baseUrl, credentials)\r\n    return response.data\r\n}\r\n\r\nexport default { login }","import React, { useState, useEffect } from 'react'\nimport Blog from './components/Blog'\nimport blogService from './services/blogs'\nimport loginService from './services/login'\n\nconst Notification = ({message, messageType}) => {\n    if(!message) return null\n\n    return (\n      <div className={`notification-${messageType}`}>\n        {message}\n      </div>\n    )\n}\n\nconst App = () => {\n  //blog content\n  const [blogs, setBlogs] = useState([])\n  //blog form\n  const [blogTitle, setBlogTitle] = useState('')\n  const [blogAuthor, setBlogAuthor] = useState('')\n  const [blogUrl, setBlogUrl] = useState('')\n  //auth\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  //notifications\n  const [message, setMessage] = useState('')\n  const [messageType, setMessageType] = useState('')\n  \n  useEffect(async () => {\n    const blogs = await blogService.getAll()\n    setBlogs(blogs)\n  }, [])\n\n  useEffect(() => {\n    const loggedUser = JSON.parse(window.localStorage.getItem('loggedBloglistUser'))\n    if(loggedUser){\n      setUser(loggedUser)\n      blogService.setToken(loggedUser.token)\n    }\n  }, [])\n\n  const clearLoginForm = () => {\n    setUsername('')\n    setPassword('')\n  }\n\n  const clearBlogForm = () => {\n    setBlogTitle('')\n    setBlogAuthor('')\n    setBlogUrl('')\n  }\n\n  const showMessage = (messageText, type) => {\n      setMessage(messageText)\n      setMessageType(type)\n      setTimeout(() => {\n        setMessage('')\n        setMessageType('')\n      }, 4000)\n  }\n\n  const handleLogin = async (e) => {\n    e.preventDefault()\n    try {\n      const userResponse = await loginService.login({username, password})\n      window.localStorage.setItem('loggedBloglistUser', JSON.stringify(userResponse))\n      blogService.setToken(userResponse.token)\n      setUser(userResponse)\n      clearLoginForm()\n    } catch(exception) {\n        showMessage('Wrong Credentials', 'error')\n        clearLoginForm()\n    }\n  }\n\n  const handleLogout = () => {\n    window.localStorage.removeItem('loggedBloglistUser')\n    setUser(null)\n    blogService.setToken(null)\n    showMessage('User logged out', 'success')\n    clearLoginForm()\n    clearBlogForm()\n  }\n\n  const createBlog = async (e) => {\n    e.preventDefault()\n    try {\n      const blog = await blogService.create({\n        title: blogTitle,\n        author: blogAuthor,\n        url: blogUrl\n      })\n      setBlogs(blogs.concat(blog))\n      showMessage(`New Blog ${blogTitle} added`, 'success')\n      clearBlogForm()\n    } catch(exception) {\n      showMessage('Invalid os missing information on form', 'error')\n      clearBlogForm()\n    }\n  }\n\n  if(user === null){\n    return (\n      <form onSubmit={handleLogin}>\n        <Notification message={message} messageType={messageType} />\n        <div>\n          Username: \n          <input \n            type=\"text\"\n            value={username}\n            name='username'\n            onChange={(e) => setUsername(e.target.value)}\n            />\n        </div>\n        <div>\n          Password:\n          <input \n            type=\"text\"\n            value={password}\n            name='password'\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    )\n  }\n\n  return (\n    <div>\n      <h2>blogs</h2>\n      <Notification message={message} messageType={messageType} />\n      <p>\n        {user.name} is logged <button onClick={handleLogout}>Logout</button>\n      </p>\n      <h2>Create Blog</h2>\n      <form onSubmit={createBlog}>\n        <div>\n          title: <input \n            type=\"text\"\n            value={blogTitle}\n            name='blogTitle'\n            onChange={({ target }) => setBlogTitle(target.value)}\n          />\n        </div>\n        <div>\n          author: <input \n            type=\"text\"\n            value={blogAuthor}\n            name='blogAuthor'\n            onChange={({ target }) => setBlogAuthor(target.value)}\n          />\n        </div>\n        <div>\n          url: <input \n            type=\"text\"\n            value={blogUrl}\n            onChange={({ target}) => setBlogUrl(target.value)}\n          />\n        </div>\n        <button type='submit'>Create New Blog</button>\n      </form>\n      {blogs.map(blog =>\n        <Blog key={blog.id} blog={blog} />\n      )}\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './App.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}